# -*- coding: utf-8 -*-
"""PROJETO_CPTM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19F3L5Zc26Jl7CMdb0P2EEjqUwPOGdufX
"""

#Importação das Bibliotecas
import pandas as pd
import numpy as np
from tqdm import tqdm_notebook as tqdm

# Nomes para ajustar os cabeçalhos
nome_abas = ['DT_VALIDACAO', 'HORA_INI', 'HORA_FIM', 'ID', 'ESTACAO', 'TX_MOVIMENTO']

# Importação da base de dados
consolidado_estacao = pd.DataFrame()
for i in tqdm(nome_abas):
  base_1 = pd.read_excel('/content/BASE.xlsx', sheet_name='Planilha1')
consolidado_estacao = pd.concat([consolidado_estacao, base_1], axis = 0, ignore_index = True)
consolidado_estacao = consolidado_estacao.reset_index(drop = True)
consolidado_estacao.describe

#Substituição dos nomes dos cabeçalhos.
try:
  del consolidado_estacao['TX_PREFIXO']
  del consolidado_estacao['CD_TIPO_LANCAMENTO_FK']
  del consolidado_estacao['TOTAL_VALIDACOES']
  del consolidado_estacao['TIPO_DIA']
  del consolidado_estacao['HORA_FIM']
except:
  pass

consolidado_estacao = consolidado_estacao.rename(columns = {'DT_VALIDACAO': 'data_percurso',
                                                            'TX_MOVIMENTO': 'tipo_pagamento',
                                                            'ESTACAO'     : 'estacao',
                                                            'HORA_INI':'hora_de_entrada'})
# Excluir linhas que contenham o bilhete de papel
bilhete_excluido = 'Bilhete Comum - Bilhete Único - Normal'
consolidado_estacao = consolidado_estacao[~consolidado_estacao['tipo_pagamento'].str.strip().str.contains(bilhete_excluido , case=False)]
# Somente a analise do dia X
# Converter a coluna 'Data' para o tipo datetime
consolidado_estacao['data_percurso'] = pd.to_datetime(consolidado_estacao['data_percurso'])
#consolidado_estacao.head()
# Definir a data alvo para o filtro
data_alvo = pd.to_datetime('2023-06-15')
#Aplicando o filtro por data
consolidado_estacao = consolidado_estacao[consolidado_estacao['data_percurso'] == data_alvo]
consolidado_estacao



# Filtrando somente as rotas duplicadas e as horas .
valores_duplicados = consolidado_estacao[consolidado_estacao.duplicated('ID',keep=False)]
valores_duplicados

# Criação de tabela com nome ID_copia
valores_duplicados['ID_copia'] = valores_duplicados['ID']

# Ordenação dos IDs
valores_duplicados = valores_duplicados.sort_values(by='ID')
valores_duplicados

# Criação do fluxo de rotas
rotas_por_id = {}
current_id = None
current_rota = []

for index, row in valores_duplicados.iterrows():
    if current_id is None:
        current_id = row['ID']
        current_rota.append(str(row['estacao']))  # Convertendo para string
    elif row['ID'] == current_id:
        current_rota.append(str(row['estacao']))  # Convertendo para string
    else:
        rotas_por_id[current_id] = current_rota
        current_id = row['ID']
        current_rota = [str(row['estacao'])]  # Convertendo para string

# Incluir a última rota após o loop
if current_id is not None:
    rotas_por_id[current_id] = current_rota

# Calcular a soma das rotas iguais
soma_rotas = {}

for id_, rota in rotas_por_id.items():
    rota_str = '-'.join(rota)
    if rota_str in soma_rotas:
        soma_rotas[rota_str] += 1
    else:
        soma_rotas[rota_str] = 1

# Exibir a soma das rotas iguais
for rota, quantidade in soma_rotas.items():
    print(f"Rota: {rota}, Quantidade: {quantidade}")

# União das rotas iguais, e ordenando pela quantidade do maior para o menor.
df_soma_rotas = pd.DataFrame(soma_rotas.items(), columns=['Rota', 'Quantidade'])
rotas_ordenadas = df_soma_rotas.sort_values(by='Quantidade', ascending=False, inplace=False)
rotas_ordenadas

import pandas as pd

# Seus dados
dados = {
    'ESTACAO': [
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
        61, 62, 63, 64
    ],
    'ESTACAO_NOME': [
        'Água Branca', 'Baltazar Fidelis', 'Botujuru', 'Brás', 'Caieiras',
        'Campo Limpo Paulista', 'Francisco Morato', 'Franco da Rocha', 'Jaraguá', 'Jundiaí',
        'Lapa', 'Luz', 'Palmeiras-Barra Funda', 'Perus', 'Piqueri', 'Pirituba',
        'Várzea Paulista', 'Vila Aurora', 'Vila Clarice', 'Brás',
        'Capuava', 'Guapituba', 'Ipiranga', 'Juventus-Mooca', 'Mauá',
        'Pref. Celso Daniel-Santo André', 'Prefeito Saladino', 'Ribeirão Pires-Antônio Bespalec',
        'Rio Grande da Serra', 'São Caetano do Sul-Pref. Walter Braido', 'Tamanduateí', 'Utinga',
        'Antonio Gianetti Neto', 'Brás', 'Braz Cubas', 'Calmon Viana', 'Corinthians-Itaquera',
        'Dom Bosco', 'Estudantes', 'Ferraz de Vasconcelos', 'Guaianases', 'José Bonifácio',
        'Jundiapeba', 'Luz', 'Mogi Das Cruzes', 'Poá', 'Suzano',
        'Tatuapé', 'Aracaré', 'Brás', 'Calmon Viana', 'Comendador Ermelino', 'Engº. Goulart',
        'Engº. Manoel Feio', 'Itaim Paulista', 'Itaquaquecetuba', 'Jardim Helena-Vila Mara', 'Jardim Romano',
        'São Miguel Paulista', 'Tatuapé', 'USP Leste', 'Aeroporto Guarulhos', 'Engº. Goulart', 'Guarulhos CECAP'
    ]
}

# Criar um DataFrame a partir dos dados
df = pd.DataFrame(dados)

# Converter o DataFrame em um dicionário
dicionario_estacoes = df.set_index('ESTACAO')['ESTACAO_NOME'].to_dict()

# Exibir o dicionário
print(dicionario_estacoes)

# Seus dados de rota


# Criar um DataFrame a partir dos dados de rota
df_rotas = rotas_ordenadas


# Função para substituir as rotas pelos nomes das estações correspondentes e trocar '-' por '/'
def substituir_rotas(rota):
    estacoes = rota.split('-')
    estacoes_nomes = [dicionario_estacoes.get(int(estacao), estacao) for estacao in estacoes]
    return '/'.join(estacoes_nomes)

# Aplicar a função para substituir as rotas
df_rotas['Rota'] = df_rotas['Rota'].apply(substituir_rotas)

# Exibir o DataFrame resultante
print(df_rotas)

# Nome do arquivo Excel de saída
nome_arquivo = 'rotas.xlsx'

# Salvar o DataFrame em um arquivo Excel
df_rotas.to_excel(nome_arquivo, index=False)

# Exibir uma mensagem para o usuário com o nome do arquivo para download
print(f"O arquivo Excel foi criado com o nome: {nome_arquivo}.")